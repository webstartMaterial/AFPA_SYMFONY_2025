<?php

namespace App\Tests\Repository; // Namespace des tests, refl√®te l‚Äôarborescence de l‚Äôapplication

use App\Entity\Article; // Entit√© principale test√©e
use App\Entity\Category; // Entit√© li√©e √† Article
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase; // Classe de base pour les tests d‚Äôint√©gration avec Symfony

class ArticleRepositorySearchTest extends KernelTestCase // Test d‚Äôint√©gration du repository Article
{
    public function testFindArticlesBySearch(): void // M√©thode de test : on v√©rifie que la recherche fonctionne
    {
        self::bootKernel(); // D√©marre le kernel Symfony (comme si l‚Äôapp tournait)
        $em = static::getContainer()->get('doctrine')->getManager(); // R√©cup√®re l‚ÄôEntityManager pour interagir avec la BDD

        // üìÇ Cr√©ation d'une cat√©gorie (obligatoire car la relation ManyToOne avec Article ne peut pas √™tre null)
        $cat = new Category();
        $cat->setName('Divers');
        $em->persist($cat); // Pr√©paration √† l‚Äôinsertion en base

        // ‚ûï Article 1 ‚Äî contient "Ordinateur" dans le **titre** (doit √™tre trouv√©)
        $article1 = (new Article())
            ->setTitle('Ordinateur Portable')
            ->setDescription('Un mod√®le rapide')
            ->setCategory($cat)
            ->setPicture('pc.jpg')
            ->setStock(10)
            ->setPrice('800.00')
            ->setCreatedAt(new \DateTimeImmutable());
        $em->persist($article1);

        // ‚ûï Article 2 ‚Äî contient "Ordinateur" dans la **description** (doit √™tre trouv√© aussi)
        $article2 = (new Article())
            ->setTitle('Smartphone')
            ->setDescription('Ordinateur de poche moderne')
            ->setCategory($cat)
            ->setPicture('phone.jpg')
            ->setStock(5)
            ->setPrice('600.00')
            ->setCreatedAt(new \DateTimeImmutable());
        $em->persist($article2);

        // ‚ûñ Article 3 ‚Äî ne contient pas "Ordinateur" (ne doit pas √™tre trouv√©)
        $article3 = (new Article())
            ->setTitle('Chaise ergonomique')
            ->setDescription('Mobilier de bureau confortable')
            ->setCategory($cat)
            ->setPicture('chair.jpg')
            ->setStock(15)
            ->setPrice('120.00')
            ->setCreatedAt(new \DateTimeImmutable());
        $em->persist($article3);

        $em->flush(); // Envoie toutes les entit√©s persist√©es en base

        // üîç Appel de la m√©thode de recherche personnalis√©e avec le mot-cl√© "Ordinateur"
        $repo = $em->getRepository(Article::class);
        $results = $repo->findArticlesBySearch('Ordinateur');

        // ‚úÖ V√©rifications
        $this->assertCount(2, $results); // On doit trouver 2 articles seulement : article1 et article2

        // On r√©cup√®re les titres des r√©sultats pour les v√©rifier facilement
        $titles = array_map(fn($a) => $a->getTitle(), $results);

        // On v√©rifie que les bons articles sont pr√©sents
        $this->assertContains('Ordinateur Portable', $titles); // titre contient "Ordinateur"
        $this->assertContains('Smartphone', $titles); // description contient "Ordinateur"

        // Et que le mauvais article est bien exclu
        $this->assertNotContains('Chaise ergonomique', $titles); // Ne correspond pas au crit√®re de recherche
    }
}
