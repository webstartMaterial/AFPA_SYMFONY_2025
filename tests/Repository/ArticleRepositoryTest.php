<?php

namespace App\Tests\Repository; // D√©clare l‚Äôespace de nom du test (doit refl√©ter la structure de ton projet)

use App\Entity\Article;    // Importe l‚Äôentit√© Article √† tester
use App\Entity\Category;   // Importe l‚Äôentit√© Category, utilis√©e par Article
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase; // Classe de base pour les tests d‚Äôint√©gration Symfony

class ArticleRepositoryTest extends KernelTestCase // D√©but de la classe de test
{
    public function testArticleIsPersistedAndRetrievedCorrectly(): void // Nom explicite du test : on v√©rifie la persistance et r√©cup√©ration d‚Äôun article
    {
        self::bootKernel(); // D√©marre le kernel Symfony (comme un mini serveur pour tester les services)
        $container = static::getContainer(); // R√©cup√®re le conteneur de services Symfony
        $entityManager = $container->get('doctrine')->getManager(); // R√©cup√®re l‚ÄôEntityManager de Doctrine (acc√®s √† la BDD)

        // ‚ûï Cr√©ation d‚Äôune cat√©gorie √† associer √† l‚Äôarticle (relation ManyToOne obligatoire)
        $category = new Category();
        $category->setName('√âlectronique'); // On donne un nom √† la cat√©gorie

        $entityManager->persist($category); // On pr√©pare Doctrine √† ins√©rer cette cat√©gorie en base

        // ‚ûï Cr√©ation d‚Äôun article avec toutes ses propri√©t√©s
        $article = new Article();
        $article->setTitle('Smartphone XYZ'); // Titre de l‚Äôarticle
        $article->setCategory($category); // On associe la cat√©gorie cr√©√©e
        $article->setPicture('smartphone.jpg'); // Image
        $article->setDescription('Un smartphone performant'); // Description
        $article->setStock(20); // Stock disponible
        $article->setPrice('699.99'); // Prix au format string car stock√© en DECIMAL
        $article->setCreatedAt(new \DateTimeImmutable()); // Date de cr√©ation

        $entityManager->persist($article); // On pr√©pare l‚Äôenregistrement en base
        $entityManager->flush(); // Envoie toutes les entit√©s persist√©es dans la base (INSERT SQL)

        // üîé R√©cup√©ration de l‚Äôarticle depuis la base de donn√©es par son ID
        $articleId = $article->getId(); // On r√©cup√®re l‚ÄôID g√©n√©r√© automatiquement
        $repo = $entityManager->getRepository(Article::class); // R√©cup√®re le repository de l‚Äôentit√© Article
        $savedArticle = $repo->find($articleId); // Va chercher l‚Äôarticle en base avec son ID

        // ‚úÖ V√©rifications (Assertions) : on s‚Äôassure que tout est bien sauvegard√©

        $this->assertInstanceOf(Article::class, $savedArticle); // V√©rifie que l‚Äôobjet retourn√© est bien un Article
        $this->assertEquals('Smartphone XYZ', $savedArticle->getTitle()); // Le titre est bien celui attendu
        $this->assertEquals('smartphone.jpg', $savedArticle->getPicture()); // L‚Äôimage correspond
        $this->assertEquals(20, $savedArticle->getStock()); // Le stock est exact
        $this->assertEquals('699.99', $savedArticle->getPrice()); // Le prix est le bon
        $this->assertEquals('√âlectronique', $savedArticle->getCategory()->getName()); // Le nom de la cat√©gorie li√©e est correct
    }
}
