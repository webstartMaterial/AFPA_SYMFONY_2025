<?php

namespace App\Tests\Service; // Namespace de lâ€™espace de test correspondant au service testÃ©

use App\Service\PriceCalculator; // On importe la classe mÃ©tier Ã  tester
use PHPUnit\Framework\TestCase; // On hÃ©rite de TestCase, base de tout test unitaire PHPUnit

class PriceCalculatorTest extends TestCase // DÃ©but de la classe de test
{
    // ğŸ§ª Test nÂ°1 : Cas classique avec une remise valide
    public function testApplyDiscountWithValidValues(): void
    {
        $calculator = new PriceCalculator(); // On instancie notre service
        $result = $calculator->applyDiscount(100.0, 20.0); // On applique une remise de 20% sur 100â‚¬
        $this->assertEquals(80.0, $result); // On sâ€™attend Ã  ce que le rÃ©sultat soit 80â‚¬
    }

    // ğŸ§ª Test nÂ°2 : Cas oÃ¹ la remise est de 0%
    public function testApplyDiscountWithZeroDiscount(): void
    {
        $calculator = new PriceCalculator();
        $result = $calculator->applyDiscount(50.0, 0.0); // Aucune remise sur 50â‚¬
        $this->assertEquals(50.0, $result); // RÃ©sultat attendu : 50â‚¬
    }

    // ğŸ§ª Test nÂ°3 : Cas dâ€™erreur avec une remise au-dessus de 100%
    public function testApplyDiscountWithInvalidDiscountAbove100(): void
    {
        $calculator = new PriceCalculator();

        $this->expectException(\InvalidArgumentException::class); // On sâ€™attend Ã  une exception
        $calculator->applyDiscount(100.0, 150.0); // 150% est une remise invalide â†’ exception levÃ©e
    }

    // ğŸ§ª Test nÂ°4 : Cas dâ€™erreur avec une remise nÃ©gative
    public function testApplyDiscountWithNegativeDiscount(): void
    {
        $calculator = new PriceCalculator();

        $this->expectException(\InvalidArgumentException::class); // LÃ  aussi, on teste lâ€™erreur
        $calculator->applyDiscount(100.0, -10.0); // Remise nÃ©gative invalide â†’ exception levÃ©e
    }
}
